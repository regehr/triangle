//Tests to ensure that you will get an acute triangle
void testAcute() {
    triangle acute;
    acute.x1 = 0;
    acute.y1 = 1;
    acute.x2 = 6;
    acute.y2 = 0;
    acute.x3 = 3;
    acute.y3 = 5;
    
    acute.lengthSideC = findLength(acute.x1, acute.y1, acute.x2, acute.y2);
    acute.lengthSideA = findLength(acute.x2, acute.y2, acute.x3, acute.y3);
    acute.lengthSideB = findLength(acute.x3, acute.y3, acute.x1, acute.y1);
    
    assert(sidesWork(acute) == "unknown");
    assert(findAngles(acute) == "acute");
}

//Tests to ensure that you will get an obtuse triangle
void testObtuse() {
    triangle obtuse;
    obtuse.x1 = 0;
    obtuse.y1 = 1;
    obtuse.x2 = 0;
    obtuse.y2 = 2;
    obtuse.x3 = 3;
    obtuse.y3 = 0;
    
    obtuse.lengthSideC = findLength(obtuse.x1, obtuse.y1, obtuse.x2, obtuse.y2);
    obtuse.lengthSideA = findLength(obtuse.x2, obtuse.y2, obtuse.x3, obtuse.y3);
    obtuse.lengthSideB = findLength(obtuse.x3, obtuse.y3, obtuse.x1, obtuse.y1);
    
    assert(sidesWork(obtuse) == "unknown");
    assert(findAngles(obtuse) == "obtuse");
}

//Tests to ensure that you will get a right triangle
void testRight() {
    triangle right;
    right.x1 = 0;
    right.y1 = 0;
    right.x2 = 0;
    right.y2 = 2;
    right.x3 = 3;
    right.y3 = 0;
    
    right.lengthSideC = findLength(right.x1, right.y1, right.x2, right.y2);
    right.lengthSideA = findLength(right.x2, right.y2, right.x3, right.y3);
    right.lengthSideB = findLength(right.x3, right.y3, right.x1, right.y1);
    
    assert(sidesWork(right) == "unknown");
    assert(findAngles(right) == "right");
}

//Tests to ensure that a point is not a triangle
void testAllPtDegen() {
    triangle degen;
    degen.x1 = 0;
    degen.y1 = 0;
    degen.x2 = 0;
    degen.y2 = 0;
    degen.x3 = 0;
    degen.y3 = 0;
    
    degen.lengthSideC = findLength(degen.x1, degen.y1, degen.x2, degen.y2);
    degen.lengthSideA = findLength(degen.x2, degen.y2, degen.x3, degen.y3);
    degen.lengthSideB = findLength(degen.x3, degen.y3, degen.x1, degen.y1);
    
    assert(sidesWork(degen) == "unknown");
    assert(findAngles(degen) == "degenerate");
}

//Tests to ensure collinear lines are not triangles
void testSamePlaneDegen() {
    triangle degen;
    degen.x1 = 0;
    degen.y1 = 1;
    degen.x2 = 2;
    degen.y2 = 3;
    degen.x3 = 4;
    degen.y3 = 5;
    
    degen.lengthSideC = findLength(degen.x1, degen.y1, degen.x2, degen.y2);
    degen.lengthSideA = findLength(degen.x2, degen.y2, degen.x3, degen.y3);
    degen.lengthSideB = findLength(degen.x3, degen.y3, degen.x1, degen.y1);
    
    //two of the lengths are the same, should give you isoceles triangle
    assert(sidesWork(degen) == "isoceles");
    assert(findAngles(degen) == "degenerate");
}

//Tests to insure that you do get a isoceles triangle before testing angles
void testIsoceles() {
    triangle isoceles;
    isoceles.x1 = 1;
    isoceles.y1 = 1;
    isoceles.x2 = 1;
    isoceles.y2 = 6;
    isoceles.x3 = 6;
    isoceles.y3 = 1;
    
    isoceles.lengthSideC = findLength(isoceles.x1, isoceles.y1, isoceles.x2, isoceles.y2);
    isoceles.lengthSideA = findLength(isoceles.x2, isoceles.y2, isoceles.x3, isoceles.y3);
    isoceles.lengthSideB = findLength(isoceles.x3, isoceles.y3, isoceles.x1, isoceles.y1);
    
    assert(sidesWork(isoceles) == "isoceles");
    assert(findAngles(isoceles) == "right");
}

// Tests to make sure side lengths give an equilateral triangle
void testEqual() {
    triangle equal;
    equal.lengthSideA = 2;
    equal.lengthSideB = 2;
    equal.lengthSideC = 2;
    
    //these points dont make an equilateral, but the sides are what we are truly testing
    equal.x1 = 0;
    equal.y1 = 1;
    equal.x2 = 0;
    equal.y2 = 2;
    equal.x3 = 3;
    equal.y3 = 0;
    
    assert(sidesWork(equal) == "equilateral");
}